{"version":3,"sources":["logo.svg","message/Message/MessageForm.js","message/Message/Message.js","messages/Messages/Messages.js","config.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MessageForm","message","handleSubmit","handleContentChange","className","onSubmit","type","name","placeholder","value","onChange","event","target","Message","user","timestamp","dateTime","Date","formatTime","format","datetime","content","Messages","messages","messagesEndRef","useRef","useEffect","current","scrollIntoView","behavior","map","index","key","id","idx","previousMessage","differenceInHours","isDateVisible","formattedDate","locale","plLocale","formatDate","ref","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","db","database","App","useState","newMessage","setNewMessage","setMessages","on","snapshot","firebaseMessages","val","convertedMessages","Object","entries","src","logo","alt","preventDefault","messageObj","now","push","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.4bb484e2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\n\r\nfunction MessageForm({ message, handleSubmit, handleContentChange }) {\r\n  return (\r\n    <div className=\"MessageForm\">\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          name=\"user\"\r\n          className=\"textField\"\r\n          placeholder=\"Beata\"\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          name=\"content\"\r\n          value={message}\r\n          onChange={(event) => handleContentChange(event.target.value)}\r\n          placeholder=\"Twoja wiadomość...\"\r\n          className=\"textField\"\r\n        />\r\n        <input type=\"submit\" value=\"Submit\" className=\"btnSubmit\"/>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MessageForm;","import React from \"react\";\r\nimport { format } from 'date-fns';\r\nimport \"./Message.css\";\r\n\r\nconst formatTime = (timestamp) => {\r\n  const dateTime = new Date(timestamp);\r\n  const formatTime = format(dateTime, 'kk:mm');\r\n  return `godz. ${formatTime}`;\r\n}\r\n\r\nfunction Message({ message }) {\r\n  return (\r\n    <div className=\"message\">\r\n      <div className=\"message--header\">\r\n        <span className=\"message--user\">{message.user}{\" \"}</span>\r\n        <span className=\"message--time\">{formatTime(message.datetime)}</span>\r\n      </div>\r\n      <div className=\"message--content\">{message.content}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Message;","import React, { useEffect, useRef } from \"react\";\r\nimport Message from \"../../message/Message/Message.js\";\r\nimport \"./Messages.css\";\r\n\r\nimport { format } from 'date-fns';\r\nimport differenceInHours from 'date-fns/differenceInHours';\r\nimport plLocale from 'date-fns/locale/pl';\r\n\r\nconst formatDate = (timestamp) => {\r\n  const dateTime = new Date(timestamp);\r\n  const formattedDate = format(dateTime, 'eee dd.MM.yyyy', {locale: plLocale});\r\n  return `${formattedDate}`;\r\n};\r\n\r\n\r\nfunction Messages({ messages })  {\r\n  const isDateVisible = (idx) => {\r\n    const numberOfHoursToDisplay = 12;\r\n    const previousMessage = messages[idx - 1];\r\n    const message = messages[idx];\r\n\r\n    if (idx === 0) return true;\r\n\r\n    return (\r\n      differenceInHours(message.datetime, previousMessage.datetime) >= numberOfHoursToDisplay\r\n    );\r\n  };\r\n\r\n  const messagesEndRef = useRef(null);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" })\r\n  };\r\n\r\n  useEffect(scrollToBottom, [messages]);\r\n\r\n  return (\r\n    <div className=\"messages\">\r\n      {messages.map((message, index) => (\r\n        <div key={message.id}>\r\n          <div>{ isDateVisible(index) && formatDate(message.datetime) }</div>\r\n          <Message message={message} index={index}/>\r\n        </div>\r\n      ))}\r\n      <div ref={messagesEndRef}></div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Messages;\r\n","import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyCjHvHMhBSV4yex_32x1f1qB1z_mz9TjWU\",\r\n  authDomain: \"chat-react-app-5c9b8.firebaseapp.com\",\r\n  databaseURL: \"https://chat-react-app-5c9b8.firebaseio.com\",\r\n  projectId: \"chat-react-app-5c9b8\",\r\n  storageBucket: \"chat-react-app-5c9b8.appspot.com\",\r\n  messagingSenderId: \"468911053448\",\r\n  appId: \"1:468911053448:web:c3cb8c978842644f8b1d3d\",\r\n  measurementId: \"G-EN7ESYNGST\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\nfirebase.analytics();\r\n\r\nconst db = firebase.database();\r\n\r\nexport default db;","import React, { useState, useEffect } from \"react\";\nimport logo from './logo.svg';\nimport './App.css';\nimport MessageForm from \"./message/Message/MessageForm.js\";\nimport Messages from \"./messages/Messages/Messages.js\";\n\nimport db from \"./config\";\n\nfunction App() {\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n\n  useEffect(() => {\n    db.ref(\"/messages\").on(\"value\", (snapshot) => {\n      const firebaseMessages = snapshot.val();\n      const convertedMessages = Object.entries(firebaseMessages || {}).map(\n        ([id, message]) => ({\n          ...message,\n          id\n        })\n      );\n      setMessages(convertedMessages);\n    });\n  }, []);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const messageObj = {\n      user: \"Beata\",\n      content: newMessage,\n      datetime: Date.now()\n    };\n    if (newMessage) {\n      db.ref(\"/messages\").push(messageObj);\n    }\n    setNewMessage(\"\");\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n      <main className=\"App-content\">\n        <Messages messages={messages} />\n        <MessageForm\n          message={newMessage}\n          handleSubmit={handleSubmit}\n          handleContentChange={setNewMessage}\n        />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}